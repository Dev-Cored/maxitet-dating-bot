from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InputMediaPhoto
from aiogram.enums import ParseMode
from aiogram.enums import ContentType
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
import html


from db import AsyncSessionLocal, Profile, Report, SentMatch, get_user_profile
import generators as gen
import kbs as kb
from .start_handler import send_profile

router_profile = Router()

class States_Profile(StatesGroup):
    waiting_for_commands = State()
    waiting_for_new_media = State()

    waiting_for_profile_actions = State()
    waiting_for_new_name = State()
    waiting_for_new_age = State()
    waiting_for_new_direction = State()
    waiting_for_new_course = State()
    waiting_for_new_text = State()
    waiting_for_new_city = State()
    waiting_for_new_gender = State()

#=================================================================================================================
# –ü—Ä–æ—Ñ–∏–ª—å

@router_profile.message(Command('my_profile'))
async def my_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)

        if profile is not None:
            await send_profile(user_id, profile)
            await message.answer("""
üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
    """,
                             reply_markup=kb.profile_actions()
                             )
            await state.set_state(States_Profile.waiting_for_commands)
        else:
            await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞–Ω–∫–µ—Ç.")


# 1 - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router_profile.message(States_Profile.waiting_for_commands, F.text == '1')
async def waiting_for_command(message: types.Message, state: FSMContext):
    await message.answer("""
–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:

1 - –ò–º—è
2 - –í–æ–∑—Ä–∞—Å—Ç
3 - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å
4 - –ì–æ—Ä–æ–¥
5 - –¢–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    """, reply_markup=kb.change_profile_menu())
    await state.set_state(States_Profile.waiting_for_profile_actions)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router_profile.message(States_Profile.waiting_for_profile_actions)
async def waiting_for_profile_action(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        action = int(message.text)
    except ValueError:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.change_profile_menu())

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)

    if action >= 1 and action <= 5:
        if action == 1:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=kb.button_text(profile.user_name))
            await state.set_state(States_Profile.waiting_for_new_name)
        elif action == 2:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb.button_text(profile.user_age))
            await state.set_state(States_Profile.waiting_for_new_age)
        elif action == 3:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=kb.select_direction())
            await state.set_state(States_Profile.waiting_for_new_direction)
        elif action == 4:
            await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥: ", reply_markup=kb.select_city())
            await state.set_state(States_Profile.waiting_for_new_city)
        elif action == 5:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–æ–ªü§®: ", reply_markup=kb.gender_keyboard())
            await state.set_state(States_Profile.waiting_for_new_gender)
        elif action == 6:
            await message.answer("""
–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è.
–¢—É—Ç –Ω–∞–ø–∏—à–∏ –æ —Å–µ–±–µ, —á–µ–≥–æ –∏—â–µ—à—å –≤ –∞–Ω–∫–µ—Ç–∞—Ö, –∫ –ø—Ä–∏–º–µ—Ä—É <b>–¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è</b> –∏–ª–∏ <b>–≤–µ—Ä–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>. –°—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã:
                                    """, parse_mode=ParseMode.HTML, reply_markup=kb.button_text(profile.text))
            await state.set_state(States_Profile.waiting_for_new_text)
    else:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!",
                                    reply_markup=kb.change_profile_menu())


# –ù–æ–≤–æ–µ –∏–º—è
@router_profile.message(States_Profile.waiting_for_new_name)
async def waiting_for_new_name(message: types.Message, state: FSMContext):
    new_name = message.text
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        profile.user_name = new_name
        await session.commit()

    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await send_profile(user_id, profile)
    await message.answer("""
    üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
    2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
    3 - –û—Ç–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É
    4 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)


# –ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç
@router_profile.message(States_Profile.waiting_for_new_age)
async def waiting_for_new_age(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        age = int(message.text)
    except ValueError:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        profile.user_age = age
        await session.commit()

    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await send_profile(user_id, profile)
    await message.answer("""
        üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
        2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
        3 - –û—Ç–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É
        4 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
            """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)


# –ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
@router_profile.message(States_Profile.waiting_for_new_direction)
async def waiting_for_new_direction(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_direction = message.text

    if new_direction == '‚å®Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ':
        new_direction = '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'

        await message.answer(
            "üèÖ –°–µ–π—á–∞—Å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb.select_course()
        )

    elif new_direction == '‚ú® –î–∏–∑–∞–π–Ω':
        new_direction = '–î–∏–∑–∞–π–Ω'
        await message.answer(
            "üèÖ –°–µ–π—á–∞—Å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb.select_course()
        )

    elif new_direction == 'üì∞ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥':
        new_direction = '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'
        await message.answer(
            "üèÖ –°–µ–π—á–∞—Å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb.select_course()
        )

    else:
        await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.select_direction())
        new_direction = None
        return

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        profile.user_direction = new_direction
        await session.commit()

    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫—É—Ä—Å:", reply_markup=kb.select_course())
    await state.set_state(States_Profile.waiting_for_new_course)


# –ù–æ–≤—ã–π –∫—É—Ä—Å
@router_profile.message(States_Profile.waiting_for_new_course)
async def waiting_for_new_course(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        course = int(message.text)
    except ValueError:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

    if course >= 1 and course <= 4:
        async with AsyncSessionLocal() as session:
            profile = await get_user_profile(session, user_id)
            profile.user_course = course
            await session.commit()

        await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
        await send_profile(user_id, profile)
        await message.answer("""
            üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
            2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
            3 - –û—Ç–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É
            4 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
                """,
                             reply_markup=kb.profile_actions()
                             )
        await state.set_state(States_Profile.waiting_for_commands)
    else:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")


# –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥
@router_profile.message(States_Profile.waiting_for_new_city)
async def waiting_for_new_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    city = message.text

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        profile.city = city
        await session.commit()

    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await send_profile(user_id, profile)
    await message.answer("""
        üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
        2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
        3 - –û—Ç–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É
        4 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
            """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

# –ù–æ–≤—ã–π –ø–æ–ª ü§®
@router_profile.message(States_Profile.waiting_for_new_gender)
async def waiting_for_new_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_gender = message.text

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        if new_gender == "üîµ–ú":
            new_gender = '–ú'
            profile.gender = new_gender

        elif new_gender == 'üî¥–ñ':
            new_gender = '–ñ'
            profile.gender = new_gender

        else:
            await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.gender_keyboard())
            return

    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await send_profile(user_id, profile)
    await message.answer("""
        üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
        2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
        3 - –û—Ç–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É
        4 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
            """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

# –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
@router_profile.message(States_Profile.waiting_for_new_text)
async def waiting_for_new_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        profile.text = text
        await session.commit()

    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    await send_profile(user_id, profile)
    await message.answer("""
        üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
        2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
        3 - –û—Ç–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É
        4 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
            """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)


# –ù–æ–≤–æ–µ –º–µ–¥–∏–∞
@router_profile.message(States_Profile.waiting_for_commands, F.text == '2')
async def waiting_for_new_media(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•", reply_markup=kb.cancel_button())
    await state.set_state(States_Profile.waiting_for_new_media)

@router_profile.message(States_Profile.waiting_for_new_media, F.photo)
async def waiting_for_new_media_photo(message: types.Message, state: FSMContext):
    media_id = message.photo[-1].file_id
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        profile.media = media_id
        await session.commit()
    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")

    await send_profile(user_id, profile)

    await message.answer("""
    üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
    2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
    3 - –û—Ç–∫–ª—é—á–∏—Ç–µ –º–æ—é –∞–Ω–∫–µ—Ç—É
    4 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

@router_profile.message(States_Profile.waiting_for_new_media, F.video)
async def waiting_for_new_media_video(message: types.Message, state: FSMContext):
    media_id = message.video.file_id
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
        profile.media = media_id
        await session.commit()
    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")

    await send_profile(user_id, profile)

    await message.answer("""
    üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
    2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
    3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

@router_profile.message(States_Profile.waiting_for_new_media)
async def waiting_for_new_media_text(message: types.Message, state: FSMContext):
    text = message.text

    if text == "üö®–û—Ç–º–µ–Ω–∞‚ùå":
        await message.answer("""
üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """, reply_markup=kb.profile_actions())
        await state.set_state(States_Profile.waiting_for_commands)
    else:
        await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!", reply_markup=kb.cancel_button())



# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router_profile.message(States_Profile.waiting_for_commands, F.text == '3')
async def switch_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    async with AsyncSessionLocal() as session:



# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç
from .watch_forms import FormStates, send_form_for_watch

@router_profile.message(States_Profile.waiting_for_commands, F.text == '4')
async def search_form(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        profile = await get_user_profile(session, user_id)
    if profile is not None:
        search_for = profile.search_for
        if search_for is None:
            await message.answer("–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, –∫–æ–≥–æ —Ç—ã –±—É–¥–µ—à—å –∏—Å–∫–∞—Ç—å: ", reply_markup=kb.preferences_keyboard())
            await state.set_state(FormStates.waiting_for_preferences)
        else:
            await send_form_for_watch(session, state, user_id)

    else:
        await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞–Ω–∫–µ—Ç.")
