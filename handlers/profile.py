from email.policy import default

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InputMediaPhoto
from aiogram.enums import ParseMode
from aiogram.enums import ContentType
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
import html


import db
import generators as gen
import kbs as kb

router_profile = Router()

class States_Profile(StatesGroup):
    waiting_for_commands = State()
    waiting_for_new_media = State()

    waiting_for_profile_actions = State()
    waiting_for_new_name = State()
    waiting_for_new_age = State()
    waiting_for_new_direction = State()
    waiting_for_new_course = State()
    waiting_for_new_text = State()


@router_profile.message(Command('my_profile'))
async def my_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    await message.answer("–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:")
    profile = db.get_profile(user_id)
    print(profile)
    profile_text = gen.profile(profile)
    try:
        await message.answer_photo(
            photo=profile['profile_media'],
            caption=profile_text,
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        if "can't use file of type Video as Photo" in str(e):
            await message.answer_video(
                video=profile['profile_media'],
                caption=profile_text,
                parse_mode=ParseMode.HTML
            )
        else:
            raise e

    await message.answer("""
üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
    """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

@router_profile.message(States_Profile.waiting_for_commands, F.text == '1')
async def waiting_for_command(message: types.Message, state: FSMContext):
    await message.answer("""
–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:

1 - –ò–º—è
2 - –í–æ–∑—Ä–∞—Å—Ç
3 - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å
4 - –¢–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    """, reply_markup=kb.change_profile_menu())
    await state.set_state(States_Profile.waiting_for_profile_actions)

@router_profile.message(States_Profile.waiting_for_profile_actions)
async def waiting_for_profile_action(message: types.Message, state: FSMContext):
    try:
        action = int(message.text)
    except ValueError:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.change_profile_menu())

    if action >= 1 and action <= 4:
        if action == 1:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:")
            await state.set_state(States_Profile.waiting_for_new_name)
        elif action == 2:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            await state.set_state(States_Profile.waiting_for_new_age)
        elif action == 3:
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=kb.select_direction())
            await state.set_state(States_Profile.waiting_for_new_direction)
        elif action == 4:
            await message.answer("""
–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è.
–¢—É—Ç –Ω–∞–ø–∏—à–∏ –æ —Å–µ–±–µ, —á–µ–≥–æ –∏—â–µ—à—å –≤ –∞–Ω–∫–µ—Ç–∞—Ö, –∫ –ø—Ä–∏–º–µ—Ä—É <b>–¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è</b> –∏–ª–∏ <b>–≤–µ—Ä–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>. –°—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã:
            """, parse_mode=ParseMode.HTML)
    else:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!",
                                    reply_markup=kb.change_profile_menu())


@router_profile.message(States_Profile.waiting_for_new_name)
async def waiting_for_new_name(message: types.Message, state: FSMContext):
    new_name = message.text
    user_id = message.from_user.id

    db.set_name(user_id, new_name)
    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    profile = db.get_profile(user_id)
    print(profile)
    profile_text = gen.profile(profile)
    try:
        await message.answer_photo(
            photo=profile['profile_media'],
            caption=profile_text,
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        if "can't use file of type Video as Photo" in str(e):
            await message.answer_video(
                video=profile['profile_media'],
                caption=profile_text,
                parse_mode=ParseMode.HTML
            )
        else:
            raise e

    await message.answer("""
    üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
    2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
    3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

@router_profile.message(States_Profile.waiting_for_new_age)
async def waiting_for_new_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
    except ValueError:
        return await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

@router_profile.message(States_Profile.waiting_for_commands, F.text == '2')
async def waiting_for_new_media(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•", reply_markup=kb.cancel_button())
    await state.set_state(States_Profile.waiting_for_new_media)

@router_profile.message(States_Profile.waiting_for_new_media, F.photo)
async def waiting_for_new_media_photo(message: types.Message, state: FSMContext):
    media_id = message.photo[-1].file_id
    user_id = message.from_user.id

    db.set_media(media_id, user_id)
    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")

    profile = db.get_profile(user_id)
    #print(profile)
    profile_text = gen.profile(profile)
    try:
        await message.answer_photo(
            photo=profile['profile_media'],
            caption=profile_text,
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        if "can't use file of type Video as Photo" in str(e):
            await message.answer_video(
                video=profile['profile_media'],
                caption=profile_text,
                parse_mode=ParseMode.HTML
            )
        else:
            raise e

    await message.answer("""
    üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
    2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
    3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

@router_profile.message(States_Profile.waiting_for_new_media, F.video)
async def waiting_for_new_media_video(message: types.Message, state: FSMContext):
    media_id = message.video.file_id
    user_id = message.from_user.id

    db.set_media(media_id, user_id)
    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")

    profile = db.get_profile(user_id)
    #print(profile)
    profile_text = gen.profile(profile)
    try:
        await message.answer_photo(
            photo=profile['profile_media'],
            caption=profile_text,
            parse_mode=ParseMode.HTML
        )
    except TelegramBadRequest as e:
        if "can't use file of type Video as Photo" in str(e):
            await message.answer_video(
                video=profile['profile_media'],
                caption=profile_text,
                parse_mode=ParseMode.HTML
            )
        else:
            raise e

    await message.answer("""
    üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
    2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
    3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """,
                         reply_markup=kb.profile_actions()
                         )
    await state.set_state(States_Profile.waiting_for_commands)

@router_profile.message(States_Profile.waiting_for_new_media)
async def waiting_for_new_media_text(message: types.Message, state: FSMContext):
    text = message.text

    if text == "üö®–û—Ç–º–µ–Ω–∞‚ùå":
        await message.answer("""
üí† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1 - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üë§
2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ üñºüé•
3 - –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üîé
        """, reply_markup=kb.profile_actions())
        await state.set_state(States_Profile.waiting_for_commands)
    else:
        await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!", reply_markup=kb.cancel_button())