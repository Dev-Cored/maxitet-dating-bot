from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardMarkup, InputMediaPhoto
from aiogram.enums import ParseMode
from aiogram.enums import ContentType
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
import html


import db
import generators as gen
import kbs as kb

router_reg = Router()

class States_Reg(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_course = State()
    waiting_for_direction = State()
    waiting_for_city = State()
    waiting_for_text = State()
    waiting_for_media = State()

    menu_enter = State()


@router_reg.message(Command('start'))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username

    await state.clear()

    is_reg = db.check_registred(user_id)

    if is_reg:
        await message.answer("–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:")
        profile = db.get_profile(user_id)
        print(profile)
        profile_text = gen.profile(profile)
        try:
            await message.answer_photo(
                photo=profile['profile_media'],
                caption=profile_text,
                parse_mode=ParseMode.HTML
            )
        except TelegramBadRequest as e:
            if "can't use file of type Video as Photo" in str(e):
                await message.answer_video(
                    video=profile['profile_media'],
                    caption=profile_text,
                    parse_mode=ParseMode.HTML
                )
            else:
                raise e

    else:
        await message.answer("""
üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ! –ù–∞—á–Ω–µ–º —Å –∏–º–µ–Ω–∏: 
        """)
        await state.set_state(States_Reg.waiting_for_name)

@router_reg.message(States_Reg.waiting_for_name)
async def enter_name(message: types.Message, state: FSMContext):
    new_name = message.text
    await state.update_data(name=new_name)

    await message.answer("""
üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:
    """)
    await state.set_state(States_Reg.waiting_for_age)

@router_reg.message(States_Reg.waiting_for_age)
async def enter_age(message: types.Message, state: FSMContext):
    new_age = message.text
    await state.update_data(age=new_age)

    await message.answer("""
üîµüî¥ –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ–ª:
    """, reply_markup=kb.gender_keyboard())
    await state.set_state(States_Reg.waiting_for_gender)

@router_reg.message(States_Reg.waiting_for_gender)
async def enter_gender(message: types.Message, state: FSMContext):
    new_gender = message.text
    if new_gender == "üîµ–ú":
        new_gender = '–ú'
        await state.update_data(gender=new_gender)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", reply_markup=kb.select_direction())
        await state.set_state(States_Reg.waiting_for_direction)

    elif new_gender == 'üî¥–ñ':
        new_gender = '–ñ'
        await state.update_data(gender=new_gender)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ", reply_markup=kb.select_direction())
        await state.set_state(States_Reg.waiting_for_direction)

    else:
        await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.gender_keyboard())

@router_reg.message(States_Reg.waiting_for_direction)
async def enter_course(message: types.Message, state: FSMContext):
    new_direction = message.text

    if new_direction == '‚å®Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ':
        new_direction == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'
        await state.update_data(direction=new_direction)
        await message.answer(
            "üèÖ –°–µ–π—á–∞—Å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb.select_course()
        )
        await state.set_state(States_Reg.waiting_for_course)
    elif new_direction == '‚ú® –î–∏–∑–∞–π–Ω':
        new_direction == '–î–∏–∑–∞–π–Ω'
        await state.update_data(direction=new_direction)
        await message.answer(
            "üèÖ –°–µ–π—á–∞—Å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb.select_course()
        )
        await state.set_state(States_Reg.waiting_for_course)
    elif new_direction == 'üì∞ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥':
        new_direction = '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥'
        await state.update_data(direction=new_direction)
        await message.answer(
            "üèÖ –°–µ–π—á–∞—Å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫—É—Ä—Å:",
            parse_mode=ParseMode.HTML,
            reply_markup=kb.select_course()
        )
        await state.set_state(States_Reg.waiting_for_course)
    else:
        await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.select_direction())

@router_reg.message(States_Reg.waiting_for_course)
async def enter_course(message: types.Message, state: FSMContext):
    try:
        new_course = int(message.text)
        print(new_course)
    except ValueError:
        print("–ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞")
        await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.select_course())

    if new_course >= 1 and new_course <= 4:
        print(new_course)
        await state.update_data(course=new_course)
        await message.answer("üìÑ –ê —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ - —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è. –¢—É—Ç –Ω–∞–ø–∏—à–∏ –æ —Å–µ–±–µ, —á–µ–≥–æ –∏—â–µ—à—å –≤ –∞–Ω–∫–µ—Ç–∞—Ö, –∫ –ø—Ä–∏–º–µ—Ä—É <b>–¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è</b> –∏–ª–∏ <b>–≤–µ—Ä–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>. –°—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã:", parse_mode=ParseMode.HTML)
        await state.set_state(States_Reg.waiting_for_text)
    else:
        await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞!", reply_markup=kb.select_course())


@router_reg.message(States_Reg.waiting_for_text)
async def enter_text(message: types.Message, state: FSMContext):
    new_text = html.escape(message.text)
    await state.update_data(text=new_text)

    await message.answer("üèô –ó–¥–µ—Å—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:", reply_markup=kb.select_city())
    await state.set_state(States_Reg.waiting_for_city)
    await message.answer("""
‚ùóÔ∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ '–û–Ω–ª–∞–π–Ω' –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤—Å–µ–º –≥–æ—Ä–æ–¥–∞–º, –Ω–æ –≤–∞–º –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–∞–∫–∏–µ –∂–µ –Ω–∞ –æ–Ω–ª–∞–π–Ω–µ.
üí° –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–∞–∫ –∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
""")


@router_reg.message(States_Reg.waiting_for_city)
async def enter_city(message: types.Message, state: FSMContext):
    new_city = message.text

    await state.update_data(city=new_city)
    await message.answer("üå† –í–æ—Ç —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å üì∑—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æüé• –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:")
    await state.set_state(States_Reg.waiting_for_media)


@router_reg.message(States_Reg.waiting_for_media, F.photo)
async def enter_photo(message: types.Message, state: FSMContext):
    media_id = message.photo[-1].file_id
    user_id = message.from_user.id
    user_name = message.from_user.username

    data = await state.get_data()
    new_name = data['name']
    new_age = data['age']
    new_gender = data['gender']
    new_direction = data['direction']
    new_course = data['course']
    new_text = data['text']
    new_city = data['city']
    new_media = media_id

    db.set_profile(user_id, user_name, new_name, new_age, new_gender, new_direction, new_course, new_city, new_text, new_media)
    await state.clear()
    await message.answer("–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:")
    profile = db.get_profile(user_id)
    profile_text = gen.profile(profile)
    await message.answer_photo(photo=profile['profile_media'],
                               caption=profile_text,
                               parse_mode=ParseMode.HTML)
    await message.answer("""
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1 - –°–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∞–Ω–∫–µ—Ç—ã
2 - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø—Ä–æ—Ñ–∏–ª—è
3 - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
4 - –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ
    """, reply_markup=kb.menu())


@router_reg.message(States_Reg.waiting_for_media, F.video)
async def enter_video(message: types.Message, state: FSMContext):
    media_id = message.video.file_id
    user_id = message.from_user.id
    user_name = message.from_user.username

    data = await state.get_data()
    new_name = data['name']
    new_age = data['age']
    new_gender = data['gender']
    new_direction = data['direction']
    new_course = data['course']
    new_text = data['text']
    new_city = data['city']
    new_media = media_id

    db.set_profile(user_id, user_name, new_name, new_age, new_gender, new_direction, new_course, new_city, new_text, new_media)
    await state.clear()
    await message.answer("–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:")
    profile = db.get_profile(user_id)
    profile_text = gen.profile(profile)
    await message.answer_photo(photo=profile['profile_media'],
                               caption=profile_text,
                               parse_mode=ParseMode.HTML)


@router_reg.message(States_Reg.waiting_for_media)
async def enter_media(message: types.Message, state: FSMContext):
    text = message.text

    await message.answer("üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")